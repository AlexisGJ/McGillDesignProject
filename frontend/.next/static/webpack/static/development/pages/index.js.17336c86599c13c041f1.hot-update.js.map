{"version":3,"file":"static/webpack/static/development/pages/index.js.17336c86599c13c041f1.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Link from 'next/link'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport moment from 'moment';\n\nimport TableComponent from '../components/TableComponent'\nimport SnackbarComponent from '../components/SnackbarComponent';\nimport AppbarComponent from '../components/AppbarComponent';\nimport { Typography } from '@material-ui/core';\n\n\nconst Post = props => (\n    <li>\n        <Link as={`/${props.slug}`} href={`/post?title=${props.title}`}>\n            <a>{props.title}</a>\n        </Link>\n    </li>\n)\n\nconst styles = theme => ({\n    root: {\n      padding: 20\n    },\n\n    snackbarContainer: {\n        minWidth: 500,\n    },\n    snackbarMargin: {\n        margin: theme.spacing.unit,\n    },\n});\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: { main: '#455a64' },\n      secondary: { main: '#ffffff' },\n    },\n    typography: {\n        useNextVariants: true,\n    },\n});\n\n\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n  \n  function stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = cmp(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n  }\n  \n  function getSorting(order, orderBy) {\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n  }\n  \n  const rows = [\n    { id: 'name', numeric: false, disablePadding: false, label: 'Nom', enableSorting: true },\n    { id: 'historique', numeric: false, disablePadding: false, label: 'Historique', enableSorting: false },\n    { id: 'mmol', numeric: true, disablePadding: true, label: 'Niveau de glucose (mmol/L)', enableSorting: true },\n    { id: 'uploaderBattery', numeric: true, disablePadding: true, label: 'Batterie', enableSorting: true },\n    { id: 'dateFromNowMinutes', numeric: true, disablePadding: false, label: 'Dernière valeur', enableSorting: true },\n  ];\n  \n\nclass Index extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            loadingData: false,\n            data: [],\n            dataFirstHalf: [],\n            dataSecondHalf: [],\n            lastSuccessfulUpdate: moment(),\n\n            snackbarOpen: false,\n            snackbarMessage: \"\",\n            snackbarVariant: \"info\",\n\n            order: 'asc',\n            orderBy: 'name',\n        };\n    }\n\n    componentDidMount() {\n        this.getData();\n        this.timer = setInterval(()=> this.getData(), 0.5 * 60 * 1000);\n    }\n\n    async getData() {\n        console.log(\"getData started!\");\n\n        this.setState({\n            loadingData: true,\n        });\n\n        fetch(\"http://localhost:1234/api/reading/allActiveChildren\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n\n                if (result && result.length > 0) {\n                    let convertedData = this.convertData(result);\n\n                    this.setState({\n                        error: null,\n                        isLoaded: true,\n                        loadingData: false,\n                        data: convertedData.slice(0),\n                        dataFirstHalf: convertedData.splice(0, Math.ceil(convertedData.length / 2)),\n                        dataSecondHalf: convertedData,\n                        lastSuccessfulUpdate: moment(),\n                    });\n\n                    setTimeout(() => {\n                        this.showSnackbarMessage(\"Données mises à jour\", \"success\");\n                    }, 1000);\n                } else {\n                    this.setState({\n                        error: null,\n                        isLoaded: true,\n                        loadingData: false,\n                    });\n\n                    setTimeout(() => {\n                        this.showSnackbarMessage(\"Erreur: impossible d'obtenir les données\", \"error\");\n                    }, 1000);\n                }\n                \n\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                this.setState({\n                    error: error,\n                    isLoaded: true,\n                });\n\n                setTimeout(() => {\n                    this.showSnackbarMessage(\"Erreur: impossible d'obtenir les données\", \"error\");\n                }, 1000);\n            }\n        )\n    }\n\n    convertData = (data) => {\n\n        moment.locale('fr-CA');\n      \n        for(var i=0; i<data.length; i++) {\n      \n          if (data[i]['readings'] && data[i]['readings'].length > 0) {\n      \n            for (var j=0; j<data[i]['readings'].length; j++) {\n              var now = moment(new Date());\n              var measurementDate = moment(data[i]['readings'][j]['dateString'])\n              var diffMinutes = Math.round(moment.duration(now.diff(measurementDate)).asMinutes());\n        \n              data[i]['readings'][j]['mmol'] = Math.round(data[i]['readings'][j]['sgv'] / 18 * 100) / 100;  // convert from mg/dl to mmol/L\n              data[i]['readings'][j]['dateFromNow'] = measurementDate.fromNow();\n              data[i]['readings'][j]['dateFromNowMinutes'] = -diffMinutes;\n              data[i]['readings'][j]['dateTime'] = measurementDate.format('HH:mm');\n            }\n        \n            data[i]['latestReading'] = data[i]['readings'][0];\n            data[i]['mmol'] = data[i]['readings'][0]['mmol'];\n            data[i]['dateFromNowMinutes'] = data[i]['readings'][0]['dateFromNowMinutes'];\n\n            var directionArrows = null;\n            switch (data[i]['latestReading']['direction']) {\n                case 'Flat':\n                  directionArrows = \"&rarr;\"\n                  break;\n                case 'SingleUp':\n                  directionArrows = \"&uarr;\"\n                  break;\n                case 'SingleDown':\n                  directionArrows = \"&darr;\"\n                  break;\n                case 'DoubleUp':\n                  directionArrows = \"&uarr;&uarr;\"\n                  break;\n                case 'DoubleDown':\n                  directionArrows = \"&darr;&darr;\"\n                  break;\n                case 'FortyFiveUp':\n                  directionArrows = \"&nearr;\"\n                  break;\n                case 'FortyFiveDown':\n                  directionArrows = \"&searr;\"\n                  break;\n                default:\n                  directionArrows = \"\"\n            }\n\n            data[i]['latestReading']['directionArrow'] = directionArrows;\n\n      \n            if (data[i]['battery']) {\n              data[i]['battery']['dateFromNow'] = moment(data[i]['battery']['created_at']).fromNow();\n              data[i]['uploaderBattery'] = data[i]['battery']['uploaderBattery'];\n            }\n      \n          } else {\n            data[i]['latestReading'] = \"err_no_data\";\n          }\n      \n        }\n        \n        return data;\n    }\n\n    showSnackbarMessage = (message, variant) => {\n        this.setState({ \n            snackbarOpen: true,\n            snackbarMessage: message,\n            snackbarVariant: variant\n        });\n    }\n    \n    snackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.setState({ snackbarOpen: false });\n    };\n\n    handleRequestSort = (event, property) => {\n        const orderBy = property;\n        let order = 'desc';\n    \n        if (this.state.orderBy === property && this.state.order === 'desc') {\n          order = 'asc';\n        }\n\n        let sortedData = stableSort(this.state.data.splice(0), getSorting(order, orderBy));\n\n        this.setState({ \n            order: order,\n            orderBy: orderBy,\n            dataFirstHalf: sortedData.splice(0, Math.ceil(sortedData.length / 2)),\n            dataSecondHalf: sortedData,\n        });\n\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        if (this.state.error) {\n            return <div>Error: {this.state.error.message}</div>;\n        } else if (!this.state.isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return(\n                <div>\n                    <MuiThemeProvider theme={theme}>\n                        <AppbarComponent loading={this.state.loadingData}/>\n                        {/* <h2>My blog</h2>\n                        <ul>\n                        <li>\n                            <Post slug=\"post/yet-another-post\" title=\"Yet another post\" />\n                            <Post slug=\"post/second-post\" title=\"Second post\" />\n                            <Post slug=\"post/hello-world\" title=\"Hello, world!\" />\n                        </li>\n                        </ul> */}\n                        \n                        <Grid container spacing={8} className={classes.root}>\n                            <Grid item xs={6}>\n                                <div>\n                                    <TableComponent \n                                        data={this.state.dataFirstHalf} \n                                        handleRequestSort={this.handleRequestSort}\n                                        order={this.state.order}\n                                        orderBy={this.state.orderBy}\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <div>\n                                    <TableComponent data={this.state.dataSecondHalf}\n                                        handleRequestSort={this.handleRequestSort}\n                                        order={this.state.order}\n                                        orderBy={this.state.orderBy}\n                                    />\n                                </div>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Typography style={{fontSize: '12px', textAlign: 'right'}}>\n                                    Dernière mise à jour {moment(this.state.lastSuccessfulUpdate).fromNow()}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n\n                        <Snackbar\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            }}\n                            open={this.state.snackbarOpen}\n                            autoHideDuration={4000}\n                            onClose={this.snackbarClose}\n                            className={classes.snackbarContainer}\n                            >\n\n                            <SnackbarComponent\n                                variant={this.state.snackbarVariant}\n                                className={classes.snackbarMargin}\n                                message={this.state.snackbarMessage}\n                                />\n\n                        </Snackbar>\n                    </MuiThemeProvider>\n                </div>\n    \n            );\n        }\n\n    }\n}\n\nIndex.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst IndexWrapped = withStyles(styles)(Index);\n\nexport default IndexWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAOA;AAAA;AACA;AACA;AADA;AAIA;AACA;AADA;AAGA;AACA;AADA;AARA;AAAA;AACA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AADA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAqFA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAvBA;AACA;AAyBA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AArJA;AAuJA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA7JA;AA+JA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AArKA;AAuKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAtLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAdA;AAFA;AAkBA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAGA;AAEA;AACA;AADA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAypQA;AACA;AAsQA;AACA;AADA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}