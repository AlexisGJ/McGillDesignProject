{"version":3,"file":"static/webpack/static/development/pages/index.js.462d83aa4414634c6dea.hot-update.js","sources":["webpack:///./components/TableComponent.js","webpack:///./pages/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport {ResponsiveContainer, LineChart, Line, YAxis} from 'recharts';\n\nimport ModalComponent from '../components/ModalComponent'\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    // minWidth: 700,\n  },\n  tableRow: {\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: theme.palette.grey[200],\n    },\n  },\n  tableSpan: {\n    fontSize: '0.6em',\n    fontColor: '#999',\n  },\n\n  value_normal: {\n    fontWeight: 'bold',\n  },\n  value_low: {\n    color: 'red',\n    fontWeight: 'bold',\n  },\n  value_high: {\n    color: 'red',\n    fontWeight: 'bold',\n  },\n\n  \n});\n\nlet id = 0;\nfunction createData(name, sensor, sgv, battery, lastTime) {\n  id += 1;\n  return { id, name, sensor, sgv, battery, lastTime };\n}\n\n// const rows = [\n//   createData('Ege Ozer', 'Dexcom G5', 2.4, 24, '2019-01-29 11:30:12'),\n//   createData('Rami Djema', 'FreeStyle Libre', 4.4, 51, '2019-01-29 14:58:12'),\n//   createData('Alexis Giguere', 'Dexcom G5', 5.2, 12, '2019-01-29 09:03:12'),\n//   createData('Ahmad Prof', 'Dexcom G5', 3.0, 87, '2019-01-29 17:45:12'),\n// ];\n\n\nclass SimpleTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        error: null,\n        isLoaded: false,\n        data: props.data,\n        open: false,\n        row: {name: \"\", sensor: \"\"},\n        rows: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      rows: this.props.data,\n      isLoaded: true\n    })\n  }\n\n  componentWillReceiveProps() {\n    this.setState({\n      rows: this.props.data,\n      isLoaded: true\n    })\n  }\n\n  handleClick = (row) => {\n    this.setState({open: true, row: row});\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { error, isLoaded, rows } = this.state;\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n      return (\n        <Paper className={classes.root}>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Nom</TableCell>\n                <TableCell align=\"right\">Historique</TableCell>\n                <TableCell align=\"right\">Valeur de glucose (mmol/L)</TableCell>\n                <TableCell align=\"right\">Batterie (%)</TableCell>\n                <TableCell align=\"right\">Dernière valeur</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(row => (\n                row.latestReading == \"err_no_data\" ? (\n                  <TableRow key={row._id} className={classes.tableRow} onClick={() => this.handleClick(row)}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                    </TableCell>\n                    <TableCell align=\"right\">N/A</TableCell>\n                    <TableCell align=\"right\"></TableCell>\n                    <TableCell align=\"right\">N/A</TableCell>\n                  </TableRow>\n                ) : (\n                  <TableRow key={row._id} className={classes.tableRow} onClick={() => this.handleClick(row)}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <div style={{ width: '100%', height: 50 }}>\n                        <ResponsiveContainer>\n                          <LineChart data={row.readings}>\n                            <YAxis type=\"number\" domain={['dataMin', 'dataMax']} hide={true} />\n                            <Line type='monotone' dataKey='mmol' stroke='#999' strokeWidth={2} dot={{ r: 0 }}/>\n                          </LineChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"right\" className={((row.latestReading.mmol < row.range_min) ? classes.value_low : ((row.latestReading.mmol > row.range_max) ? classes.value_high : classes.value_normal))}>\n                      {row.latestReading.mmol} <span dangerouslySetInnerHTML={{__html: row.latestReading.directionArrow}}></span>\n                    </TableCell>\n                    {row.battery ? (\n                      <TableCell align=\"right\">{row.battery.uploaderBattery} ({row.battery.dateFromNow})</TableCell>\n                    ) : (\n                      <TableCell align=\"right\"></TableCell>\n                    )}\n                    <TableCell align=\"right\">{row.latestReading.dateTime}<br></br><span className={classes.tableSpan}>{row.latestReading.dateFromNow}</span></TableCell>\n                  </TableRow>\n                )\n                \n              ))}\n            </TableBody>\n          </Table>\n  \n          <ModalComponent open={this.state.open} handleOpen={this.handleOpen} handleClose={this.handleClose} sensorData={this.state.row}/>\n        </Paper>\n      );\n    }\n\n  }\n}\n\nSimpleTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst SimpleTableWrapped = withStyles(styles)(SimpleTable);\n\nexport default SimpleTableWrapped;","import Link from 'next/link'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport moment from 'moment';\n\nimport '../static/css/main_custom.css'\n\nimport TableComponent from '../components/TableComponent'\nimport SnackbarComponent from '../components/SnackbarComponent';\nimport AppbarComponent from '../components/AppbarComponent';\n\n\nconst Post = props => (\n    <li>\n        <Link as={`/${props.slug}`} href={`/post?title=${props.title}`}>\n            <a>{props.title}</a>\n        </Link>\n    </li>\n)\n\nconst styles = theme => ({\n    root: {\n      padding: 20\n    },\n\n    snackbarContainer: {\n        minWidth: 500,\n    },\n    snackbarMargin: {\n        margin: theme.spacing.unit,\n    },\n});\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: { main: '#455a64' },\n      secondary: { main: '#ffffff' },\n    },\n    typography: {\n        useNextVariants: true,\n    },\n});\n  \n\nclass Index extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            loadingData: false,\n            data: [],\n            dataFirstHalf: [],\n            dataSecondHalf: [],\n\n            snackbarOpen: false,\n            snackbarMessage: \"\",\n            snackbarVariant: \"info\",\n        };\n    }\n\n    componentDidMount() {\n        this.getData();\n        this.timer = setInterval(()=> this.getData(), 0.5 * 60 * 1000);\n    }\n\n    async getData() {\n        console.log(\"getData started!\");\n\n        this.setState({\n            loadingData: true,\n        });\n\n        fetch(\"http://localhost:1234/api/reading/allActiveChildren\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                let convertedData = this.convertData(result);\n\n                this.setState({\n                    error: null,\n                    isLoaded: true,\n                    loadingData: false,\n                    data: convertedData,\n                    dataFirstHalf: convertedData.splice(0, Math.ceil(convertedData.length / 2)),\n                    dataSecondHalf: convertedData,\n                });\n\n                setTimeout(() => {\n                    this.showSnackbarMessage(\"Données mises à jour\", \"success\");\n                }, 1000);\n                \n\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                this.setState({\n                    error: error,\n                    isLoaded: true,\n                });\n            }\n        )\n    }\n\n    convertData = (data) => {\n\n        moment.locale('fr-CA');\n      \n        for(var i=0; i<data.length; i++) {\n      \n          if (data[i]['readings'] && data[i]['readings'].length > 0) {\n      \n            for (var j=0; j<data[i]['readings'].length; j++) {\n              var now = moment(new Date());\n              var measurementDate = moment(data[i]['readings'][j]['dateString'])\n              var diffMinutes = Math.round(moment.duration(now.diff(measurementDate)).asMinutes());\n        \n              data[i]['readings'][j]['mmol'] = Math.round(data[i]['readings'][j]['sgv'] / 18 * 100) / 100;  // convert from mg/dl to mmol/L\n              data[i]['readings'][j]['dateFromNow'] = measurementDate.fromNow();\n              data[i]['readings'][j]['dateFromNowMinutes'] = -diffMinutes;\n              data[i]['readings'][j]['dateTime'] = measurementDate.format('HH:mm');\n            }\n        \n            data[i]['latestReading'] = data[i]['readings'][0];\n\n            var directionArrows = null;\n            switch (data[i]['latestReading']['direction']) {\n                case 'Flat':\n                  directionArrows = \"&rarr;\"\n                  break;\n                case 'SingleUp':\n                  directionArrows = \"&uarr;\"\n                  break;\n                case 'SingleDown':\n                  directionArrows = \"&darr;\"\n                  break;\n                case 'DoubleUp':\n                  directionArrows = \"&uarr;&uarr;\"\n                  break;\n                case 'DoubleDown':\n                  directionArrows = \"&darr;&darr;\"\n                  break;\n                case 'FortyFiveUp':\n                  directionArrows = \"&nearr;\"\n                  break;\n                case 'FortyFiveDown':\n                  directionArrows = \"&searr;\"\n                  break;\n                default:\n                  directionArrows = \"\"\n            }\n\n            data[i]['latestReading']['directionArrow'] = directionArrows;\n\n      \n            if (data[i]['battery']) {\n              data[i]['battery']['dateFromNow'] = moment(data[i]['battery']['created_at']).fromNow();\n            }\n      \n          } else {\n            data[i]['latestReading'] = \"err_no_data\";\n          }\n      \n        }\n        \n        return data;\n    }\n\n    showSnackbarMessage = (message, variant) => {\n        this.setState({ \n            snackbarOpen: true,\n            snackbarMessage: message,\n            snackbarVariant: variant\n        });\n    }\n    \n    snackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.setState({ snackbarOpen: false });\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        if (this.state.error) {\n            return <div>Error: {this.state.error.message}</div>;\n        } else if (!this.state.isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return(\n                <div>\n                    <MuiThemeProvider theme={theme}>\n                        <AppbarComponent loading={this.state.loadingData}/>\n                        {/* <h2>My blog</h2>\n                        <ul>\n                        <li>\n                            <Post slug=\"post/yet-another-post\" title=\"Yet another post\" />\n                            <Post slug=\"post/second-post\" title=\"Second post\" />\n                            <Post slug=\"post/hello-world\" title=\"Hello, world!\" />\n                        </li>\n                        </ul> */}\n                        \n                        <Grid container spacing={8} className={classes.root}>\n                            <Grid item xs={6}>\n                                <div>\n                                    <TableComponent data={this.state.dataFirstHalf}/>\n                                </div>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <div>\n                                    <TableComponent data={this.state.dataSecondHalf}/>\n                                </div>\n                            </Grid>\n                        </Grid>\n\n                        <Snackbar\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            }}\n                            open={this.state.snackbarOpen}\n                            autoHideDuration={4000}\n                            onClose={this.snackbarClose}\n                            className={classes.snackbarContainer}\n                            >\n\n                            <SnackbarComponent\n                                variant={this.state.snackbarVariant}\n                                className={classes.snackbarMargin}\n                                message={this.state.snackbarMessage}\n                                />\n\n                        </Snackbar>\n                    </MuiThemeProvider>\n                </div>\n    \n            );\n        }\n\n    }\n}\n\nIndex.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst IndexWrapped = withStyles(styles)(Index);\n\nexport default IndexWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA3BA;AAAA;AACA;AAkCA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2BA;AAAA;AAAA;AAAA;AACA;AACA;AA7BA;AA+BA;AAAA;AAAA;AACA;AACA;AAjCA;AAmCA;AAAA;AAAA;AACA;AACA;AAnCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAFA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAcnCA;AA2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;AA9GA;AACA;AAgHA;AACA;AADA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtLA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAOA;AAAA;AACA;AACA;AADA;AAIA;AACA;AADA;AAGA;AACA;AADA;AARA;AAAA;AACA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AADA;AALA;AACA;AAUA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+DA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAvBA;AACA;AAyBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA5HA;AA8HA;AACA;AACA;AACA;AAHA;AAKA;AACA;AApIA;AAsIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA1IA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAVA;AAFA;AAcA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAGA;AAEA;AACA;AADA;AAIA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;;;;;;;;;;;AAmzMA;AACA;AA2MA;AACA;AADA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}