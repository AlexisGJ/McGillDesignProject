{"version":3,"file":"static/webpack/static/development/pages/index.js.6098426544acbbed6367.hot-update.js","sources":["webpack:///./components/TableComponent.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\n\nimport {ResponsiveContainer, LineChart, Line, XAxis, YAxis} from 'recharts';\n\nimport ModalComponent from '../components/ModalComponent'\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    // minWidth: 700,\n  },\n  tableRow: {\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: theme.palette.grey[200],\n    },\n  },\n  tableSpan: {\n    fontSize: '0.6em',\n    fontColor: '#999',\n  },\n\n  value_normal: {\n    fontWeight: 'bold',\n  },\n  value_low: {\n    color: 'red',\n    fontWeight: 'bold',\n  },\n  value_high: {\n    color: 'red',\n    fontWeight: 'bold',\n  },\n\n  \n});\n\n\nfunction desc(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction stableSort(array, cmp) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n  return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n}\n\nconst rows = [\n  { id: 'nom', numeric: false, disablePadding: false, label: 'Nom' },\n  { id: 'historique', numeric: false, disablePadding: false, label: 'Historique' },\n  { id: 'sgv', numeric: true, disablePadding: true, label: 'Niveau de glucose (mmol/L)' },\n  { id: 'battery', numeric: true, disablePadding: true, label: 'Batterie' },\n  { id: 'time', numeric: true, disablePadding: false, label: 'Dernière valeur' },\n];\n\n\nclass EnhancedTableHead extends React.Component {\n  createSortHandler = property => event => {\n    this.props.onRequestSort(event, property);\n  };\n\n  render() {\n    const { order, orderBy } = this.props;\n\n    return (\n      <TableHead>\n        <TableRow>\n          {rows.map(\n            row => (\n              <TableCell\n                key={row.id}\n                align={row.id == 'nom' ? 'left' : 'right'}\n                padding={row.disablePadding ? 'none' : 'default'}\n                sortDirection={orderBy === row.id ? order : false}\n              >\n                <Tooltip\n                  title=\"Sort\"\n                  placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n                  enterDelay={300}\n                >\n                  <TableSortLabel\n                    active={orderBy === row.id}\n                    direction={order}\n                    onClick={this.createSortHandler(row.id)}\n                  >\n                    {row.label}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            ),\n            this,\n          )}\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nEnhancedTableHead.propTypes = {\n  onRequestSort: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n};\n\n\n\nclass SimpleTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: props.data,\n      open: false,\n      row: {name: \"\", sensor: \"\"},\n      rows: [],\n      order: 'asc',\n      orderBy: 'nom',\n    };\n  }\n\n  handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = 'desc';\n\n    if (this.state.orderBy === property && this.state.order === 'desc') {\n      order = 'asc';\n    }\n\n    this.setState({ order, orderBy });\n  };\n\n  componentDidMount() {\n    this.setState({\n      rows: this.props.data,\n      isLoaded: true\n    })\n  }\n\n  componentWillReceiveProps() {\n    this.setState({\n      rows: this.props.data,\n      isLoaded: true\n    })\n  }\n\n  handleClick = (row) => {\n    this.setState({open: true, row: row});\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { error, isLoaded, rows, order, orderBy } = this.state;\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n      return (\n        <Paper className={classes.root}>\n          <Table className={classes.table}>\n            {/* <TableHead>\n              <TableRow>\n                <TableCell>Nom</TableCell>\n                <TableCell align=\"right\">Historique</TableCell>\n                <TableCell align=\"right\">Valeur de glucose (mmol/L)</TableCell>\n                <TableCell align=\"right\">Batterie (%)</TableCell>\n                <TableCell align=\"right\">Dernière valeur</TableCell>\n              </TableRow>\n            </TableHead> */}\n            <EnhancedTableHead\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={this.handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(rows, getSorting(order, orderBy))\n                .map(row => (\n                row.latestReading == \"err_no_data\" ? (\n                  <TableRow key={row._id} className={classes.tableRow} onClick={() => this.handleClick(row)}>\n                    <TableCell component=\"th\" scope=\"row\" padding=\"dense\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\" padding=\"dense\">\n                    </TableCell>\n                    <TableCell align=\"right\" padding=\"dense\">N/A</TableCell>\n                    <TableCell align=\"right\" padding=\"dense\"></TableCell>\n                    <TableCell align=\"right\" padding=\"dense\">N/A</TableCell>\n                  </TableRow>\n                ) : (\n                  <TableRow key={row._id} className={classes.tableRow} onClick={() => this.handleClick(row)}>\n                    <TableCell component=\"th\" scope=\"row\" padding=\"dense\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\" padding=\"dense\">\n                      <div style={{ width: '100%', height: 50 }}>\n                        <ResponsiveContainer>\n                          <LineChart data={row.readings}>\n                            <XAxis type=\"number\" dataKey=\"dateFromNowMinutes\" hide={true} />\n                            <YAxis type=\"number\" domain={['dataMin', 'dataMax']} hide={true} />\n                            <Line type='monotone' dataKey='mmol' stroke='#999' strokeWidth={2} dot={{ r: 0 }}/>\n                          </LineChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"right\" padding=\"dense\" className={((row.latestReading.mmol < row.range_min) ? classes.value_low : ((row.latestReading.mmol > row.range_max) ? classes.value_high : classes.value_normal))}>\n                      {row.latestReading.mmol} <span style={{fontSize: '1.3em', marginTop: '-5px'}} dangerouslySetInnerHTML={{__html: row.latestReading.directionArrow}}></span>\n                    </TableCell>\n                    {row.battery ? (\n                      <TableCell align=\"right\" padding=\"dense\">{row.battery.uploaderBattery} %<br></br><span className={classes.tableSpan}>{row.battery.dateFromNow}</span></TableCell>\n                    ) : (\n                      <TableCell align=\"right\" padding=\"dense\"></TableCell>\n                    )}\n                    <TableCell align=\"right\" padding=\"dense\">{row.latestReading.dateTime}<br></br><span className={classes.tableSpan}>{row.latestReading.dateFromNow}</span></TableCell>\n                  </TableRow>\n                )\n                \n              ))}\n            </TableBody>\n          </Table>\n  \n          <ModalComponent open={this.state.open} handleOpen={this.handleOpen} handleClose={this.handleClose} sensorData={this.state.row}/>\n        </Paper>\n      );\n    }\n\n  }\n}\n\nSimpleTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst SimpleTableWrapped = withStyles(styles)(SimpleTable);\n\nexport default SimpleTableWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA3BA;AAAA;AACA;AAmCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AACA;AAFA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AA2BA;;;;AAvCA;AACA;AAyCA;AACA;AACA;AACA;AAHA;AACA;AAOA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAxBA;AAwCA;AAAA;AAAA;AAAA;AACA;AACA;AA1CA;AA4CA;AAAA;AAAA;AACA;AACA;AA9CA;AAgDA;AAAA;AAAA;AACA;AACA;AAhDA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AARA;AAFA;AAYA;AACA;;;AAYA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAcpCA;AA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;AAlIA;AACA;AAoIA;AACA;AADA;AAIA;AAEA;;;;A","sourceRoot":""}