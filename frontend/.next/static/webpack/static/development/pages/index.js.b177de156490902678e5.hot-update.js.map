{"version":3,"file":"static/webpack/static/development/pages/index.js.b177de156490902678e5.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Link from 'next/link'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport GoogleLogin from 'react-google-login';\nimport moment from 'moment';\n\nimport '../static/css/main_custom.css'\n\nimport TableComponent from '../components/TableComponent'\nimport SnackbarComponent from '../components/SnackbarComponent';\nimport AppbarComponent from '../components/AppbarComponent';\n\n\nconst Post = props => (\n    <li>\n        <Link as={`/${props.slug}`} href={`/post?title=${props.title}`}>\n            <a>{props.title}</a>\n        </Link>\n    </li>\n)\n\nconst styles = theme => ({\n    root: {\n      padding: 20\n    }\n});\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: { main: '#455a64' }, // Purple and green play nicely together.\n      secondary: { main: '#11cb5f' }, // This is just green.A700 as hex.\n    },\n    typography: {\n        useNextVariants: true,\n    },\n});\n  \n\nclass Index extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            loadingData: false,\n            data: [],\n            dataFirstHalf: [],\n            dataSecondHalf: []\n        };\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(()=> this.getData(), 5 * 1000)\n    }\n\n    async getData() {\n        console.log(\"getData started!\");\n\n        this.setState({\n            loadingData: true,\n        });\n\n        fetch(\"http://localhost:1234/api/reading/allActiveChildren\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n\n                let convertedData = this.convertData(result);\n                console.log(convertedData);\n\n                this.setState({\n                    error: null,\n                    isLoaded: true,\n                    loadingData: false,\n                    data: convertedData,\n                    dataFirstHalf: convertedData.splice(0, Math.ceil(convertedData.length / 2)),\n                    dataSecondHalf: convertedData,\n                });\n\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                this.setState({\n                    error: error,\n                    isLoaded: true,\n                });\n            }\n        )\n    }\n\n    convertData = (data) => {\n\n        moment.locale('fr-CA');\n      \n        for(var i=0; i<data.length; i++) {\n      \n          if (data[i]['readings'] && data[i]['readings'].length > 0) {\n      \n            for (var j=0; j<data[i]['readings'].length; j++) {\n              var now = moment(new Date());\n              var measurementDate = moment(data[i]['readings'][j]['dateString'])\n              var diffMinutes = Math.round(moment.duration(now.diff(measurementDate)).asSeconds());\n        \n              data[i]['readings'][j]['mmol'] = Math.round(data[i]['readings'][j]['sgv'] / 18 * 100) / 100;  // convert from mg/dl to mmol/L\n              data[i]['readings'][j]['dateFromNow'] = diffMinutes;\n              data[i]['readings'][j]['dateFromNowMinutes'] = -diffMinutes;\n              data[i]['readings'][j]['dateTime'] = measurementDate.format('HH:mm');\n            }\n        \n            data[i]['latestReading'] = data[i]['readings'][0];\n      \n            if (data[i]['battery']) {\n              data[i]['battery']['dateFromNow'] = moment(data[i]['battery']['created_at']).fromNow();\n            }\n      \n          } else {\n      \n            data[i]['latestReading'] = \"err_no_data\";\n            console.log(\"err_no_data\");\n      \n          }\n      \n        }\n        \n        return data;\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        const responseGoogle = (response) => {\n            console.log(response);\n        }\n\n        if (this.state.error) {\n            return <div>Error: {this.state.error.message}</div>;\n        } else if (!this.state.isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return(\n                <div>\n                    <MuiThemeProvider theme={theme}>\n                        <AppbarComponent />\n                        {/* <h2>My blog</h2>\n                        <ul>\n                        <li>\n                            <Post slug=\"post/yet-another-post\" title=\"Yet another post\" />\n                            <Post slug=\"post/second-post\" title=\"Second post\" />\n                            <Post slug=\"post/hello-world\" title=\"Hello, world!\" />\n                        </li>\n                        </ul> */}\n\n                        {this.state.loadingData ? \"True\" : \"False\"}\n\n                        <GoogleLogin\n                                clientId=\"379738068740-tgguug359j7mqrm0vqledsf9si5u7ssp.apps.googleusercontent.com\"\n                                buttonText=\"Login to google\"\n                                onSuccess={responseGoogle}\n                                onFailure={responseGoogle}\n                                />\n                        \n                        <Grid container spacing={8} className={classes.root}>\n                            <Grid item xs={6}>\n                                <div>\n                                    <TableComponent data={this.state.dataFirstHalf}/>\n                                </div>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <div>\n                                    <TableComponent data={this.state.dataSecondHalf}/>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </MuiThemeProvider>\n                </div>\n    \n            );\n        }\n\n    }\n}\n\nIndex.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst IndexWrapped = withStyles(styles)(Index);\n\nexport default IndexWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAOA;AAAA;AACA;AACA;AADA;AADA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;AADA;AALA;AACA;AAUA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAuDA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAvFA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAUA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAGA;AAEA;AACA;AADA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;;;;;;;;;;;AAwCA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;;;;AAhJA;AACA;AAkJA;AACA;AADA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}