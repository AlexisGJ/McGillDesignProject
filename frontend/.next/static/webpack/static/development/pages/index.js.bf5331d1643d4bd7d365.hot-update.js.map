{"version":3,"file":"static/webpack/static/development/pages/index.js.bf5331d1643d4bd7d365.hot-update.js","sources":["webpack:///./components/ModalComponent.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport moment from 'moment';\n\nimport { scale, scalePow, scaleLog } from 'd3-scale';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, ReferenceLine,\n  ReferenceDot, ReferenceArea, Tooltip, CartesianGrid, Legend, Brush, ErrorBar, AreaChart, Area,\n  Label, LabelList } from 'recharts';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n    borderRadius: '5px',\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    // width: theme.spacing.unit * 50,\n    width: 600,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass CustomizedAxisTick extends React.Component {\n  render() {\n    const {\n      x, y, stroke, payload,\n    } = this.props;\n\n    const date = moment(new Date()).subtract(-payload.value, \"minutes\").format(\"HH:mm\");\n\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-45)\">{date}</text>\n      </g>\n    );\n  }\n}\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  if (active) {\n    const date = moment(new Date()).subtract(-label, \"minutes\").fromNow();\n    return (\n      <div className=\"custom-tooltip\">\n        <div className=\"value\">{`${payload[0].value}`} <span>mmol/L</span></div>\n        <div className=\"time\">{date}</div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst timeScale = [\n  {\n    value: '1',\n    label: 'Dernière heure',\n  },\n  {\n    value: '3',\n    label: '3 dernières heures',\n  },\n  {\n    value: '12',\n    label: '12 dernières heures',\n  },\n  {\n    value: '24',\n    label: '24 dernières heures',\n  },\n];\n\nclass SimpleModal extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {loaded: false, data: props.data, allData: props.data};\n  }\n\n  componentDidMount() {\n    this.setState({loaded: true});\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.data!==this.props.data){\n      if (nextProps.data.readings) {\n        this.setState({\n          data: nextProps.data.readings.reverse(),\n          allData: nextProps.data,\n        });\n      }\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { loaded, data, allData } = this.state;\n\n    if (!loaded || !allData._id) {\n      return null;\n    } else {\n      return (\n        <div>\n          <Modal\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n            open={this.props.open}\n            onClose={this.props.handleClose}\n          >\n            <div style={getModalStyle()} className={classes.paper}>\n              <Typography variant=\"h4\" id=\"modal-title\">\n                {allData.name}\n              </Typography>\n\n              <Grid container>\n                <Grid item xs={4}>\n                    <TextField\n                        id=\"outlined-name-input\"\n                        label=\"Appareil\"\n                        className={classes.textField}\n                        type=\"text\"\n                        name=\"device\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          readOnly: true,\n                        }}\n                        value={allData.latestReading.device}\n                    />\n                </Grid>\n                <Grid item xs={4}>\n                    <TextField\n                        id=\"outlined-sensorId-input\"\n                        label=\"Emplacement\"\n                        className={classes.textField}\n                        type=\"text\"\n                        name=\"location\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          readOnly: true,\n                        }}\n                        value={allData.location}\n                    />\n                </Grid>\n                <Grid item xs={4}>\n                  <TextField\n                    id=\"outlined-select-currency\"\n                    select\n                    label=\"Select\"\n                    className={classes.textField}\n                    value={this.state.currency}\n                    // onChange={this.handleChange('currency')}\n                    SelectProps={{\n                      MenuProps: {\n                        className: classes.menu,\n                      },\n                    }}\n                    helperText=\"Please select your currency\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                  >\n                    {timeScale.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                </Grid>\n              </Grid>\n\n              <LineChart\n                  width={600}\n                  height={500}\n                  data={data}\n                  margin={{ top: 5, right: 20, left: 0, bottom: 5 }}\n                  className=\"line-chart\"\n                  >\n                  <XAxis type=\"number\" dataKey=\"dateFromNowMinutes\" height={100} tickCount={10} tick={<CustomizedAxisTick />} label=\"temps\"/>\n                  <YAxis width={80}>\n                    <Label value=\"mmol/L\" offset={5} position=\"insideTopLeft\" />\n                  </YAxis>\n                  <Tooltip content={<CustomTooltip />} />\n                  <CartesianGrid stroke=\"#f5f5f5\" />\n\n                  <Line yAxisId={0} type=\"monotone\" dataKey=\"mmol\" stroke=\"#54a4ef\" strokeWidth={2} dot={{ r: 1 }} />\n                  <ReferenceLine y={allData.range_min} stroke=\"#97191b\" strokeWidth={2} className=\"graph-referenece-line\" >\n                    <Label value={\"MIN \" + allData.range_min} offset={5} position=\"insideTopRight\" />\n                  </ReferenceLine>\n                  <ReferenceLine y={allData.range_max} stroke=\"#97191b\" strokeWidth={2} className=\"graph-referenece-line\" >\n                    <Label value={\"MAX \" + allData.range_max} offset={5} position=\"insideBottomRight\" />\n                  </ReferenceLine>\n\n              </LineChart>\n            </div>\n          </Modal>\n        </div>\n      );\n    }\n\n  }\n}\n\nSimpleModal.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n// We need an intermediary variable for handling the recursive nesting.\nconst SimpleModalWrapped = withStyles(styles)(SimpleModal);\n\nexport default SimpleModalWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AADA;AAVA;AAAA;AACA;AAcA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAbA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAghIA;AACA;AAkIA;AACA;AADA;AACA;AAIA;AAEA;;;;A","sourceRoot":""}