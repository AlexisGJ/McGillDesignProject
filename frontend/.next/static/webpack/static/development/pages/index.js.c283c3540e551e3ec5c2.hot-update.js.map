{"version":3,"file":"static/webpack/static/development/pages/index.js.c283c3540e551e3ec5c2.hot-update.js","sources":["webpack:///./components/TableComponent.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\n\nimport {ResponsiveContainer, LineChart, Line, YAxis} from 'recharts';\n\nimport ModalComponent from '../components/ModalComponent'\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    // minWidth: 700,\n  },\n  tableRow: {\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: theme.palette.grey[200],\n    },\n  },\n\n  value_normal: {\n    fontWeight: 'bold',\n  },\n  value_low: {\n    color: 'red',\n    fontWeight: 'bold',\n  },\n  value_high: {\n    color: 'red',\n    fontWeight: 'bold',\n  },\n\n  \n});\n\nlet id = 0;\nfunction createData(name, sensor, sgv, battery, lastTime) {\n  id += 1;\n  return { id, name, sensor, sgv, battery, lastTime };\n}\n\n// const rows = [\n//   createData('Ege Ozer', 'Dexcom G5', 2.4, 24, '2019-01-29 11:30:12'),\n//   createData('Rami Djema', 'FreeStyle Libre', 4.4, 51, '2019-01-29 14:58:12'),\n//   createData('Alexis Giguere', 'Dexcom G5', 5.2, 12, '2019-01-29 09:03:12'),\n//   createData('Ahmad Prof', 'Dexcom G5', 3.0, 87, '2019-01-29 17:45:12'),\n// ];\n\nfunction convertData(data) {\n\n  moment.locale('fr-CA');\n\n  for(var i=0; i<data.length; i++) {\n\n    if (data[i]['readings'] && data[i]['readings'].length > 0) {\n\n      for (var j=0; j<data[i]['readings'].length; j++) {\n        var now = moment(new Date());\n        var measurementDate = moment(data[i]['readings'][j]['dateString'])\n        var diffMinutes = Math.round(moment.duration(now.diff(measurementDate)).asSeconds());\n  \n        data[i]['readings'][j]['mmol'] = Math.round(data[i]['readings'][j]['sgv'] / 18 * 100) / 100;  // convert from mg/dl to mmol/L\n        data[i]['readings'][j]['dateFromNow'] = diffMinutes;\n        data[i]['readings'][j]['dateFromNowMinutes'] = -diffMinutes;\n        data[i]['readings'][j]['dateTime'] = measurementDate.format('HH:mm');\n      }\n  \n      data[i]['latestReading'] = data[i]['readings'][0];\n\n      if (data[i]['battery']) {\n        data[i]['battery']['dateFromNow'] = moment(data[i]['battery']['created_at']).fromNow();\n      }\n\n    } else {\n\n      data[i]['latestReading'] = \"err_no_data\";\n\n    }\n\n  }\n  \n  return data;\n}\n\nclass SimpleTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        error: null,\n        isLoaded: false,\n        data: props.data,\n        open: false,\n        row: {name: \"\", sensor: \"\"},\n        rows: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      rows: convertData(this.state.data),\n      isLoaded: true\n    })\n  }\n\n  handleClick = (row) => {\n    this.setState({open: true, row: row});\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { error, isLoaded, rows } = this.state;\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n      return (\n        <Paper className={classes.root}>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Nom</TableCell>\n                <TableCell align=\"right\">Historique</TableCell>\n                <TableCell align=\"right\">Valeur de glucose (mmol/L)</TableCell>\n                <TableCell align=\"right\">Batterie (%)</TableCell>\n                <TableCell align=\"right\">Derni√®re valeur</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(row => (\n                row.latestReading == \"err_no_data\" ? (\n                  <TableRow key={row._id} className={classes.tableRow} onClick={() => this.handleClick(row)}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                    </TableCell>\n                    <TableCell align=\"right\">N/A</TableCell>\n                    <TableCell align=\"right\"></TableCell>\n                    <TableCell align=\"right\">N/A</TableCell>\n                  </TableRow>\n                ) : (\n                  <TableRow key={row._id} className={classes.tableRow} onClick={() => this.handleClick(row)}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <div style={{ width: '100%', height: 50 }}>\n                        <ResponsiveContainer>\n                          <LineChart data={row.readings}>\n                            <YAxis type=\"number\" domain={['dataMin', 'dataMax']} hide=\"true\" />\n                            <Line type='monotone' dataKey='mmol' stroke='#999' strokeWidth={2} dot={{ r: 0 }}/>\n                          </LineChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"right\" className={((row.latestReading.mmol < row.range_min) ? classes.value_low : ((row.latestReading.mmol > row.range_max) ? classes.value_high : classes.value_normal))}>{row.latestReading.mmol}</TableCell>\n                    {row.battery ? (\n                      <TableCell align=\"right\">{row.battery.uploaderBattery} ({row.battery.dateFromNow})</TableCell>\n                    ) : (\n                      <TableCell align=\"right\"></TableCell>\n                    )}\n                    <TableCell align=\"right\">{row.latestReading.dateFromNow}</TableCell>\n                  </TableRow>\n                )\n                \n              ))}\n            </TableBody>\n          </Table>\n  \n          <ModalComponent open={this.state.open} handleOpen={this.handleOpen} handleClose={this.handleClose} sensorData={this.state.row}/>\n        </Paper>\n      );\n    }\n\n  }\n}\n\nSimpleTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst SimpleTableWrapped = withStyles(styles)(SimpleTable);\n\nexport default SimpleTableWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAvBA;AAAA;AACA;AA8BA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AAAA;AAAA;AAAA;AACA;AACA;AAtBA;AAwBA;AAAA;AAAA;AACA;AACA;AA1BA;AA4BA;AAAA;AAAA;AACA;AACA;AA5BA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAFA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAcjCA;AAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;AArGA;AACA;AAuGA;AACA;AADA;AAIA;AAEA;;;;A","sourceRoot":""}