{"version":3,"file":"static/webpack/static/development/pages/index.js.c86119c60118e3951cb8.hot-update.js","sources":["webpack:///./components/ModalComponent.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n});\n\nclass SimpleModal extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <Typography gutterBottom>Click to get the full Modal experience!</Typography>\n        <Button onClick={this.handleOpen}>Open Modal</Button>\n        <Modal\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n          open={this.state.open}\n          onClose={this.handleClose}\n        >\n          <div style={getModalStyle()} className={classes.paper}>\n            <Typography variant=\"h6\" id=\"modal-title\">\n              Text in a modal\n            </Typography>\n            <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n              Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n            </Typography>\n            <SimpleModalWrapped />\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nSimpleModal.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n// We need an intermediary variable for handling the recursive nesting.\nconst SimpleModalWrapped = withStyles(styles)(SimpleModal);\n\nexport default SimpleModalWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AACA;AAUA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAtCA;AACA;AAwCA;AACA;AADA;AACA;AAIA;AAEA;;;;A","sourceRoot":""}