{"version":3,"file":"static/webpack/static/development/pages/settings.js.4aca2e5c93aa32b557b3.hot-update.js","sources":["webpack:///./pages/settings.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Link from 'next/link'\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nimport '../static/css/main_custom.css'\n\nimport SnackbarComponent from '../components/SnackbarComponent';\nimport AppbarComponent from '../components/AppbarComponent';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: 20,\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n      heading: {\n        fontSize: theme.typography.pxToRem(15),\n      },\n      secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n      },\n      icon: {\n        verticalAlign: 'bottom',\n        height: 20,\n        width: 20,\n      },\n      details: {\n        alignItems: 'center',\n      },\n      column: {\n        flexBasis: '33.33%',\n      },\n      helper: {\n        borderLeft: `2px solid ${theme.palette.divider}`,\n        padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n      },\n      link: {\n        color: theme.palette.primary.main,\n        textDecoration: 'none',\n        '&:hover': {\n          textDecoration: 'underline',\n        },\n      },\n\n      textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n      },\n  });\n\n\nconst rows = [\n    {\n        \"panelId\": 'panel' + Math.random()*1000,\n        \"panelTitle\": \"General settings\",\n        \"panelDescription\": \"Hey this is a description\",\n        \"panelText\": \"Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat. Aliquam eget maximus est, id dignissim quam.\",\n\n    },\n    {\n        \"panelId\": 'panel' + Math.random()*1000,\n        \"panelTitle\": \"General settings\",\n        \"panelDescription\": \"Hey this is a description\",\n        \"panelText\": \"Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat. Aliquam eget maximus est, id dignissim quam.\",\n\n    }\n];\n  \n\nclass Settings extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            expanded: null,\n            data: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:1234/api/child/all\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    data: result\n                });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        )\n    }\n\n    handleChange = panel => (event, expanded) => {\n        this.setState({\n            expanded: expanded ? panel : false,\n        });\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { error, isLoaded, data, expanded } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return(\n                <div>\n                    <AppbarComponent />\n\n                    <Grid container spacing={24} className={classes.root}>\n                        <Grid item xs={2}></Grid>\n                        <Grid item xs={8}>\n                            <Paper className={classes.paper} elevation={1}>\n\n                            {data.map((row, key) =>\n                                // <ExpansionPanel expanded={expanded === row._id} onChange={this.handleChange(row._id)}>\n                                //     <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                                //         <Typography className={classes.heading}>{row.name}</Typography>\n                                //         <Typography className={classes.secondaryHeading}>{row.location}</Typography>\n                                //     </ExpansionPanelSummary>\n                                //     <ExpansionPanelDetails>\n                                //         <Typography>\n                                //         {row.collection_id}\n                                //         </Typography>\n                                //     </ExpansionPanelDetails>\n                                // </ExpansionPanel>\n\n                                <ExpansionPanel key={row._id} expanded={expanded === row._id} onChange={this.handleChange(row._id)}>\n                                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                                    <div className={classes.column}>\n                                        <Typography className={classes.heading}><span className={classes.childActiveTrue}>&#9679;</span> {row.name}</Typography>\n                                    </div>\n                                    <div className={classes.column}>\n                                        <Typography className={classes.secondaryHeading}>{row.location}</Typography>\n                                    </div>\n                                    </ExpansionPanelSummary>\n                                    <ExpansionPanelDetails className={classes.details}>\n                                        <Grid container>\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    id=\"outlined-name-input\"\n                                                    label=\"Nom\"\n                                                    className={classes.textField}\n                                                    type=\"text\"\n                                                    name=\"name\"\n                                                    margin=\"normal\"\n                                                    variant=\"outlined\"\n                                                />\n                                            </Grid>\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    id=\"outlined-sensorId-input\"\n                                                    label=\"ID du capteur\"\n                                                    className={classes.textField}\n                                                    type=\"text\"\n                                                    name=\"sensorId\"\n                                                    margin=\"normal\"\n                                                    variant=\"outlined\"\n                                                />\n                                            </Grid>\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    id=\"outlined-location-input\"\n                                                    label=\"Location\"\n                                                    className={classes.textField}\n                                                    type=\"text\"\n                                                    name=\"location\"\n                                                    margin=\"normal\"\n                                                    variant=\"outlined\"\n                                                />\n                                            </Grid>\n                                            <Grid item xs={4}></Grid>\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    id=\"outlined-rangemin-input\"\n                                                    label=\"Range minimum\"\n                                                    className={classes.textField}\n                                                    type=\"number\"\n                                                    name=\"rangemin\"\n                                                    margin=\"normal\"\n                                                    variant=\"outlined\"\n                                                    value={row.range_min}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    id=\"outlined-rangemax-input\"\n                                                    label=\"Range maximal\"\n                                                    className={classes.textField}\n                                                    type=\"number\"\n                                                    name=\"rangemin\"\n                                                    margin=\"normal\"\n                                                    variant=\"outlined\"\n                                                    value={row.range_max}\n                                                />\n                                            </Grid>\n\n                                            <Grid item xs={4}></Grid>\n                                            <Grid item xs={4}></Grid>\n                                            <Grid item xs={4}>\n                                                <FormControlLabel\n                                                    control={\n                                                    <Switch\n                                                        checked={this.state.gilad}\n                                                        // onChange={this.handleChange('gilad')}\n                                                        value=\"gilad\"\n                                                    />\n                                                    }\n                                                    label=\"Actif\"\n                                                />\n                                            </Grid>\n                                            \n                                        </Grid>\n                                        \n                                        {/* <div className={classes.column} />\n                                        <div className={classes.column}>\n                                            <Chip label={row.location} className={classes.chip} onDelete={() => {}} />\n                                        </div>\n                                        <div className={classNames(classes.column, classes.helper)}>\n                                            <Typography variant=\"caption\">\n                                                Select your destination of choice\n                                                <br />\n                                                <a href=\"#sub-labels-and-columns\" className={classes.link}>\n                                                    Learn more\n                                                </a>\n                                            </Typography>\n                                        </div> */}\n                                    </ExpansionPanelDetails>\n                                    <Divider />\n                                    <ExpansionPanelActions>\n                                        <Button size=\"small\" onClick={this.handleChange(row._id)}>Cancel</Button>\n                                        <Button size=\"small\" color=\"primary\">Save</Button>\n                                    </ExpansionPanelActions>\n                                </ExpansionPanel>\n                            )}\n\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={2}></Grid>\n                    </Grid>\n                    \n                    <SnackbarComponent />\n\n                </div>\n\n            );\n        }\n    }\n}\n\nSettings.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst SettingsWrapped = withStyles(styles)(Settings);\n\nexport default SettingsWrapped;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AACA;AAFA;AAxCA;AAAA;AACA;AA8CA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AAJA;AACA;AASA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgCA;AACA;AACA;AADA;AAGA;AAJA;AACA;AA/BA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AADA;AAGA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArHA;AAAA;AA4HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;;AA/LA;AACA;AAiMA;AACA;AADA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}